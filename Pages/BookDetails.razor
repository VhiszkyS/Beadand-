@page "/books/{id:guid}"
@using BeadandóShared
@using BeadandóUI.Services
@using BeadandóUI.Components
@inject IBookService BookService
@inject NavigationManager NavigationManager

@if (_book is not null && !_errored)
{
    <h3>BookDetails</h3>

    <BookForm Book="_book" OnValidSubmit="UpdateAsync" ButtonText="Update" />
    
    <button class="btn btn-danger form-control mt-3" @onclick="() => DeleteAsync()">Delete</button>
}
else if (_errored)
{
    <div class="alert alert-danger">
        Book not found
    </div>
}
else
{
    <p>Loading...</p>
}


@code {

    private bool _errored = false;
    private Book _book;
    
    [Parameter]
    public Guid Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _book = await BookService.GetAsync(Id);
        }
        catch (Exception)
        {
            _errored = true;
        }
    }

    private async Task DeleteAsync()
    {
        await BookService.DeleteAsync(Id);
        NavigationManager.NavigateTo("books");
    }
    
    private async Task UpdateAsync()
    {
        await BookService.UpdateAsync(_book);
        NavigationManager.NavigateTo("books");
    }

}